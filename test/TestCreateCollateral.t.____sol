pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;

import {StdCheatsSafe} from "forge-std/StdCheats.sol";
import {Test} from "forge-std/Test.sol";
import {console} from "forge-std/console.sol";
import {Jug} from "../src/jug.sol";
import {DssDeployExt} from "../script/DssDeploy.s.sol";
import {ProxyActions} from "./helpers/ProxyActions.sol";
import {IlkRegistry} from "dss-ilk-registry/IlkRegistry.sol";
import {PriceFeedFactory, PriceFeedAggregator} from "../script/factory/PriceFeedFactory.sol";
import {PriceJoinFeedFactory, PriceJoinFeedAggregator} from "../script/factory/PriceJoinFeedFactory.sol";
import {ChainlinkPip, AggregatorV3Interface} from "./helpers/ChainlinkPip.sol";

contract TestCreateCollateral is StdCheatsSafe, Test {
    function test_create_collateral() public {
        vm.createSelectFork("https://eth-sepolia.g.alchemy.com/v2/U7tte8molsSlREKDCvXxIXR1OBmyKRhp", 7261199);
        /***
Contract Call:
  address:   0xD8A5CB276F76e675bFfD98d02CEdb75191e668A0
  function:  addCollateral(address proxyActions, address ilkRegistry, (bytes32 ilk, uint256 line, uint256 dust, uint256 tau, uint256 mat, uint256 hole, uint256 chop, uint256 buf, uint256 duty), (address token, uint8 decimals, uint256 maxSupply, string name, string symbol), (address factory, address joinFactory, address feed, int256 initialPrice, uint8 decimals, address numeratorFeed, address denominatorFeed, bool invertNumerator, bool invertDenominator, string feedDescription))
  args:                   ()
  sender:    0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
 */
        address DSS_DEPLOY_ADDY = 0x088540CCde9e5AfA8aA888022849046F1DB71beD;
        vm.startPrank(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);

        DssDeployExt(DSS_DEPLOY_ADDY).addCollateral(
            ProxyActions(0x3D57ECE3b829b269CB762755222ac0D00757c7D9),
            IlkRegistry(0x3889dE64A07546A02dCec5665d35cA162AEdC061),
            DssDeployExt.IlkParams({
                ilk: 0x784441492d410000000000000000000000000000000000000000000000000000,
                line: 1000000000000000000000000000000000000000000000000000,
                dust: 0,
                tau: 3600000000000000000000000,
                mat: 1200000000000000000000000000,
                hole: 5000000000000000000000000000000000000000000000000000,
                chop: 1150000000000000000,
                buf: 1200000000000000000000000000,
                duty: 1000000000937303470807876291
            }),
            DssDeployExt.TokenParams({
                token: address(0),
                decimals: 6,
                maxSupply: 1000000000000000,
                name: "xDAI",
                symbol: "xDAI"
            }),
            DssDeployExt.FeedParams({
                feed: address(0),
                factory: PriceFeedFactory(0x6C205d1b1c20352e9d33a88569f18D103004762D),
                joinFactory: PriceJoinFeedFactory(0x72007ee16E562335c7505F190E53073428BfDC25),
                initialPrice: 0,
                decimals: 8,
                numeratorFeed: 0x14866185B1962B63C3Ea9E03Bc1da838bab34C19,
                denominatorFeed: 0x50906d825655Ccce382f1dA5440f84E504C0A5C2,
                invertNumerator: false,
                invertDenominator: false,
                feedDescription: "xDAI/USD"
            })
        );
    }
}
